// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: xraft.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// XRaftServerClient is the client API for XRaftServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type XRaftServerClient interface {
	ProposeGrpc(ctx context.Context, in *Message, opts ...grpc.CallOption) (*MessageReply, error)
	AbortReqGrpc(ctx context.Context, in *AbortReq, opts ...grpc.CallOption) (*RequestReply, error)
	StartFast(ctx context.Context, in *FBFCmd, opts ...grpc.CallOption) (*MessageReply, error)
	Ping(ctx context.Context, in *Message, opts ...grpc.CallOption) (*MessageReply, error)
}

type xRaftServerClient struct {
	cc grpc.ClientConnInterface
}

func NewXRaftServerClient(cc grpc.ClientConnInterface) XRaftServerClient {
	return &xRaftServerClient{cc}
}

func (c *xRaftServerClient) ProposeGrpc(ctx context.Context, in *Message, opts ...grpc.CallOption) (*MessageReply, error) {
	out := new(MessageReply)
	err := c.cc.Invoke(ctx, "/pb.xRaftServer/Propose_grpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xRaftServerClient) AbortReqGrpc(ctx context.Context, in *AbortReq, opts ...grpc.CallOption) (*RequestReply, error) {
	out := new(RequestReply)
	err := c.cc.Invoke(ctx, "/pb.xRaftServer/AbortReq_grpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xRaftServerClient) StartFast(ctx context.Context, in *FBFCmd, opts ...grpc.CallOption) (*MessageReply, error) {
	out := new(MessageReply)
	err := c.cc.Invoke(ctx, "/pb.xRaftServer/StartFast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xRaftServerClient) Ping(ctx context.Context, in *Message, opts ...grpc.CallOption) (*MessageReply, error) {
	out := new(MessageReply)
	err := c.cc.Invoke(ctx, "/pb.xRaftServer/ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// XRaftServerServer is the server API for XRaftServer service.
// All implementations must embed UnimplementedXRaftServerServer
// for forward compatibility
type XRaftServerServer interface {
	ProposeGrpc(context.Context, *Message) (*MessageReply, error)
	AbortReqGrpc(context.Context, *AbortReq) (*RequestReply, error)
	StartFast(context.Context, *FBFCmd) (*MessageReply, error)
	Ping(context.Context, *Message) (*MessageReply, error)
	mustEmbedUnimplementedXRaftServerServer()
}

// UnimplementedXRaftServerServer must be embedded to have forward compatible implementations.
type UnimplementedXRaftServerServer struct {
}

func (UnimplementedXRaftServerServer) ProposeGrpc(context.Context, *Message) (*MessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposeGrpc not implemented")
}
func (UnimplementedXRaftServerServer) AbortReqGrpc(context.Context, *AbortReq) (*RequestReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AbortReqGrpc not implemented")
}
func (UnimplementedXRaftServerServer) StartFast(context.Context, *FBFCmd) (*MessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartFast not implemented")
}
func (UnimplementedXRaftServerServer) Ping(context.Context, *Message) (*MessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedXRaftServerServer) mustEmbedUnimplementedXRaftServerServer() {}

// UnsafeXRaftServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to XRaftServerServer will
// result in compilation errors.
type UnsafeXRaftServerServer interface {
	mustEmbedUnimplementedXRaftServerServer()
}

func RegisterXRaftServerServer(s grpc.ServiceRegistrar, srv XRaftServerServer) {
	s.RegisterService(&XRaftServer_ServiceDesc, srv)
}

func _XRaftServer_ProposeGrpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XRaftServerServer).ProposeGrpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.xRaftServer/Propose_grpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XRaftServerServer).ProposeGrpc(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _XRaftServer_AbortReqGrpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbortReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XRaftServerServer).AbortReqGrpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.xRaftServer/AbortReq_grpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XRaftServerServer).AbortReqGrpc(ctx, req.(*AbortReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XRaftServer_StartFast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FBFCmd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XRaftServerServer).StartFast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.xRaftServer/StartFast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XRaftServerServer).StartFast(ctx, req.(*FBFCmd))
	}
	return interceptor(ctx, in, info, handler)
}

func _XRaftServer_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XRaftServerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.xRaftServer/ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XRaftServerServer).Ping(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

// XRaftServer_ServiceDesc is the grpc.ServiceDesc for XRaftServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var XRaftServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.xRaftServer",
	HandlerType: (*XRaftServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Propose_grpc",
			Handler:    _XRaftServer_ProposeGrpc_Handler,
		},
		{
			MethodName: "AbortReq_grpc",
			Handler:    _XRaftServer_AbortReqGrpc_Handler,
		},
		{
			MethodName: "StartFast",
			Handler:    _XRaftServer_StartFast_Handler,
		},
		{
			MethodName: "ping",
			Handler:    _XRaftServer_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "xraft.proto",
}
