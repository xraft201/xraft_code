// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.11
// source: curp_command.proto

package curp_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CurpClient is the client API for Curp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CurpClient interface {
	Propose(ctx context.Context, in *CurpClientCommand, opts ...grpc.CallOption) (*CurpReply, error)
	WaitSynced(ctx context.Context, in *ProposeId, opts ...grpc.CallOption) (*CurpReply, error)
	IsLeader(ctx context.Context, in *LeaderAck, opts ...grpc.CallOption) (*LeaderReply, error)
}

type curpClient struct {
	cc grpc.ClientConnInterface
}

func NewCurpClient(cc grpc.ClientConnInterface) CurpClient {
	return &curpClient{cc}
}

func (c *curpClient) Propose(ctx context.Context, in *CurpClientCommand, opts ...grpc.CallOption) (*CurpReply, error) {
	out := new(CurpReply)
	err := c.cc.Invoke(ctx, "/curp_proto.Curp/Propose", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *curpClient) WaitSynced(ctx context.Context, in *ProposeId, opts ...grpc.CallOption) (*CurpReply, error) {
	out := new(CurpReply)
	err := c.cc.Invoke(ctx, "/curp_proto.Curp/WaitSynced", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *curpClient) IsLeader(ctx context.Context, in *LeaderAck, opts ...grpc.CallOption) (*LeaderReply, error) {
	out := new(LeaderReply)
	err := c.cc.Invoke(ctx, "/curp_proto.Curp/IsLeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CurpServer is the server API for Curp service.
// All implementations must embed UnimplementedCurpServer
// for forward compatibility
type CurpServer interface {
	Propose(context.Context, *CurpClientCommand) (*CurpReply, error)
	WaitSynced(context.Context, *ProposeId) (*CurpReply, error)
	IsLeader(context.Context, *LeaderAck) (*LeaderReply, error)
	mustEmbedUnimplementedCurpServer()
}

// UnimplementedCurpServer must be embedded to have forward compatible implementations.
type UnimplementedCurpServer struct {
}

func (UnimplementedCurpServer) Propose(context.Context, *CurpClientCommand) (*CurpReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Propose not implemented")
}
func (UnimplementedCurpServer) WaitSynced(context.Context, *ProposeId) (*CurpReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitSynced not implemented")
}
func (UnimplementedCurpServer) IsLeader(context.Context, *LeaderAck) (*LeaderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsLeader not implemented")
}
func (UnimplementedCurpServer) mustEmbedUnimplementedCurpServer() {}

// UnsafeCurpServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CurpServer will
// result in compilation errors.
type UnsafeCurpServer interface {
	mustEmbedUnimplementedCurpServer()
}

func RegisterCurpServer(s grpc.ServiceRegistrar, srv CurpServer) {
	s.RegisterService(&Curp_ServiceDesc, srv)
}

func _Curp_Propose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurpClientCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurpServer).Propose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/curp_proto.Curp/Propose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurpServer).Propose(ctx, req.(*CurpClientCommand))
	}
	return interceptor(ctx, in, info, handler)
}

func _Curp_WaitSynced_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProposeId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurpServer).WaitSynced(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/curp_proto.Curp/WaitSynced",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurpServer).WaitSynced(ctx, req.(*ProposeId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Curp_IsLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaderAck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurpServer).IsLeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/curp_proto.Curp/IsLeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurpServer).IsLeader(ctx, req.(*LeaderAck))
	}
	return interceptor(ctx, in, info, handler)
}

// Curp_ServiceDesc is the grpc.ServiceDesc for Curp service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Curp_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "curp_proto.Curp",
	HandlerType: (*CurpServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Propose",
			Handler:    _Curp_Propose_Handler,
		},
		{
			MethodName: "WaitSynced",
			Handler:    _Curp_WaitSynced_Handler,
		},
		{
			MethodName: "IsLeader",
			Handler:    _Curp_IsLeader_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "curp_command.proto",
}
